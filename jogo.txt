import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, Alert, StyleSheet } from 'react-native';

// Função para gerar hash
const crypto = require('crypto');

const generateHash = (value) => {
  return crypto.createHash('sha256').update(value.toString()).digest('hex');
};

export default function App() {
  const [username, setUsername] = useState('');
  const [token, setToken] = useState('');
  const [xp, setXp] = useState(100);
  const [level, setLevel] = useState(1);

  // Login no jogo
  const handleLogin = async () => {
    try {
      const response = await fetch('http://localhost:3000/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username })
      });
      const data = await response.json();
      if (data.token) {
        setToken(data.token);
        Alert.alert('Login bem-sucedido');
      } else {
        Alert.alert('Falha no login');
      }
    } catch (error) {
      console.error('Erro ao fazer login:', error);
    }
  };

  // Atualizar XP
  const updateXP = async (newXP) => {
    const xpHash = generateHash(newXP);
    try {
      const response = await fetch('http://localhost:3000/update-xp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token, newXP, xpHash })
      });
      const data = await response.json();
      if (data.xp) {
        setXp(data.xp);
        Alert.alert('XP atualizado com sucesso');
      } else {
        Alert.alert(data.message);
      }
    } catch (error) {
      console.error('Erro ao atualizar XP:', error);
    }
  };

  // Subir de Nível
  const levelUp = async (newLevel) => {
    try {
      const response = await fetch('http://localhost:3000/level-up', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token, newLevel })
      });
      const data = await response.json();
      if (data.level) {
        setLevel(data.level);
        Alert.alert('Nível atualizado com sucesso');
      } else {
        Alert.alert(data.message);
      }
    } catch (error) {
      console.error('Erro ao subir de nível:', error);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Bem-vindo ao Jogo!</Text>
      {!token ? (
        <View>
          <TextInput
            style={styles.input}
            placeholder="Nome de usuário"
            value={username}
            onChangeText={setUsername}
          />
          <Button title="Entrar" onPress={handleLogin} />
        </View>
      ) : (
        <View>
          <Text style={styles.text}>XP: {xp}</Text>
          <Text style={styles.text}>Nível: {level}</Text>
          <Button title="Aumentar XP" onPress={() => updateXP(xp + 10)} />
          <Button title="Subir de Nível" onPress={() => levelUp(level + 1)} />
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 20,
    paddingLeft: 10,
    width: 200,
  },
  text: {
    fontSize: 18,
    marginBottom: 10,
  }
});
